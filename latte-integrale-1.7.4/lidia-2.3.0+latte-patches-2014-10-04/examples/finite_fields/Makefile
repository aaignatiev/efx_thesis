# Makefile.in generated by automake 1.13.4 from Makefile.am.
# examples/finite_fields/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/lidia
pkgincludedir = $(includedir)/lidia
pkglibdir = $(libdir)/lidia
pkglibexecdir = $(libexecdir)/lidia
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i386-apple-darwin22.3.0
host_triplet = i386-apple-darwin22.3.0
DIST_COMMON = $(top_srcdir)/Paths.def $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am $(top_srcdir)/depcomp
applexec_PROGRAMS = factorization_appl$(EXEEXT) \
	Fp_polynomial_test_appl$(EXEEXT) \
	Fp_rational_function_appl$(EXEEXT) dlp_appl$(EXEEXT) \
	fpc_appl$(EXEEXT) Fp_pol_factor_appl$(EXEEXT) \
	berlekamp_appl$(EXEEXT) can_zass_appl$(EXEEXT) \
	gf_pol_factor_appl$(EXEEXT) bit_reverse_table_appl$(EXEEXT) \
	fft_prime_appl$(EXEEXT) gf2n_appl$(EXEEXT) \
	gf2n_find_root_appl$(EXEEXT) gf2n_poly_modulus_appl$(EXEEXT) \
	gf2n_polynomial_appl$(EXEEXT) \
	gf2n_rational_function_appl$(EXEEXT) gf_pol_appl$(EXEEXT) \
	gfpn_appl$(EXEEXT) galois_field_iterator_appl$(EXEEXT) \
	dense_power_series_appl$(EXEEXT) dpsr_udigit_mod_appl$(EXEEXT) \
	sparse_power_series_appl$(EXEEXT)
subdir = examples/finite_fields
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/LiDIA/LiDIA.h \
	$(top_builddir)/include/LiDIA/path.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(applexecdir)"
PROGRAMS = $(applexec_PROGRAMS)
am_Fp_pol_factor_appl_OBJECTS = Fp_pol_factor_appl.$(OBJEXT)
Fp_pol_factor_appl_OBJECTS = $(am_Fp_pol_factor_appl_OBJECTS)
Fp_pol_factor_appl_LDADD = $(LDADD)
Fp_pol_factor_appl_DEPENDENCIES = $(LIDIA_LTLIB)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
am_Fp_polynomial_test_appl_OBJECTS =  \
	Fp_polynomial_test_appl.$(OBJEXT)
Fp_polynomial_test_appl_OBJECTS =  \
	$(am_Fp_polynomial_test_appl_OBJECTS)
Fp_polynomial_test_appl_LDADD = $(LDADD)
Fp_polynomial_test_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_Fp_rational_function_appl_OBJECTS =  \
	Fp_rational_function_appl.$(OBJEXT)
Fp_rational_function_appl_OBJECTS =  \
	$(am_Fp_rational_function_appl_OBJECTS)
Fp_rational_function_appl_LDADD = $(LDADD)
Fp_rational_function_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_berlekamp_appl_OBJECTS = berlekamp_appl.$(OBJEXT)
berlekamp_appl_OBJECTS = $(am_berlekamp_appl_OBJECTS)
berlekamp_appl_LDADD = $(LDADD)
berlekamp_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_bit_reverse_table_appl_OBJECTS = bit_reverse_table_appl.$(OBJEXT)
bit_reverse_table_appl_OBJECTS = $(am_bit_reverse_table_appl_OBJECTS)
bit_reverse_table_appl_LDADD = $(LDADD)
bit_reverse_table_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_can_zass_appl_OBJECTS = can_zass_appl.$(OBJEXT)
can_zass_appl_OBJECTS = $(am_can_zass_appl_OBJECTS)
can_zass_appl_LDADD = $(LDADD)
can_zass_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dense_power_series_appl_OBJECTS =  \
	dense_power_series_appl.$(OBJEXT)
dense_power_series_appl_OBJECTS =  \
	$(am_dense_power_series_appl_OBJECTS)
dense_power_series_appl_LDADD = $(LDADD)
dense_power_series_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dlp_appl_OBJECTS = dlp_appl.$(OBJEXT)
dlp_appl_OBJECTS = $(am_dlp_appl_OBJECTS)
dlp_appl_LDADD = $(LDADD)
dlp_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_dpsr_udigit_mod_appl_OBJECTS = dpsr_udigit_mod_appl.$(OBJEXT)
dpsr_udigit_mod_appl_OBJECTS = $(am_dpsr_udigit_mod_appl_OBJECTS)
dpsr_udigit_mod_appl_LDADD = $(LDADD)
dpsr_udigit_mod_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_factorization_appl_OBJECTS = factorization_appl.$(OBJEXT)
factorization_appl_OBJECTS = $(am_factorization_appl_OBJECTS)
factorization_appl_LDADD = $(LDADD)
factorization_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_fft_prime_appl_OBJECTS = fft_prime_appl.$(OBJEXT)
fft_prime_appl_OBJECTS = $(am_fft_prime_appl_OBJECTS)
fft_prime_appl_LDADD = $(LDADD)
fft_prime_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_fpc_appl_OBJECTS = fpc_appl.$(OBJEXT)
fpc_appl_OBJECTS = $(am_fpc_appl_OBJECTS)
fpc_appl_LDADD = $(LDADD)
fpc_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_galois_field_iterator_appl_OBJECTS =  \
	galois_field_iterator_appl.$(OBJEXT)
galois_field_iterator_appl_OBJECTS =  \
	$(am_galois_field_iterator_appl_OBJECTS)
galois_field_iterator_appl_LDADD = $(LDADD)
galois_field_iterator_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_appl_OBJECTS = gf2n_appl.$(OBJEXT)
gf2n_appl_OBJECTS = $(am_gf2n_appl_OBJECTS)
gf2n_appl_LDADD = $(LDADD)
gf2n_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_find_root_appl_OBJECTS = gf2n_find_root_appl.$(OBJEXT)
gf2n_find_root_appl_OBJECTS = $(am_gf2n_find_root_appl_OBJECTS)
gf2n_find_root_appl_LDADD = $(LDADD)
gf2n_find_root_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_poly_modulus_appl_OBJECTS = gf2n_poly_modulus_appl.$(OBJEXT)
gf2n_poly_modulus_appl_OBJECTS = $(am_gf2n_poly_modulus_appl_OBJECTS)
gf2n_poly_modulus_appl_LDADD = $(LDADD)
gf2n_poly_modulus_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_polynomial_appl_OBJECTS = gf2n_polynomial_appl.$(OBJEXT)
gf2n_polynomial_appl_OBJECTS = $(am_gf2n_polynomial_appl_OBJECTS)
gf2n_polynomial_appl_LDADD = $(LDADD)
gf2n_polynomial_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf2n_rational_function_appl_OBJECTS =  \
	gf2n_rational_function_appl.$(OBJEXT)
gf2n_rational_function_appl_OBJECTS =  \
	$(am_gf2n_rational_function_appl_OBJECTS)
gf2n_rational_function_appl_LDADD = $(LDADD)
gf2n_rational_function_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf_pol_appl_OBJECTS = gf_pol_appl.$(OBJEXT)
gf_pol_appl_OBJECTS = $(am_gf_pol_appl_OBJECTS)
gf_pol_appl_LDADD = $(LDADD)
gf_pol_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gf_pol_factor_appl_OBJECTS = gf_pol_factor_appl.$(OBJEXT)
gf_pol_factor_appl_OBJECTS = $(am_gf_pol_factor_appl_OBJECTS)
gf_pol_factor_appl_LDADD = $(LDADD)
gf_pol_factor_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_gfpn_appl_OBJECTS = gfpn_appl.$(OBJEXT)
gfpn_appl_OBJECTS = $(am_gfpn_appl_OBJECTS)
gfpn_appl_LDADD = $(LDADD)
gfpn_appl_DEPENDENCIES = $(LIDIA_LTLIB)
am_sparse_power_series_appl_OBJECTS =  \
	sparse_power_series_appl.$(OBJEXT)
sparse_power_series_appl_OBJECTS =  \
	$(am_sparse_power_series_appl_OBJECTS)
sparse_power_series_appl_LDADD = $(LDADD)
sparse_power_series_appl_DEPENDENCIES = $(LIDIA_LTLIB)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = 
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(Fp_pol_factor_appl_SOURCES) \
	$(Fp_polynomial_test_appl_SOURCES) \
	$(Fp_rational_function_appl_SOURCES) $(berlekamp_appl_SOURCES) \
	$(bit_reverse_table_appl_SOURCES) $(can_zass_appl_SOURCES) \
	$(dense_power_series_appl_SOURCES) $(dlp_appl_SOURCES) \
	$(dpsr_udigit_mod_appl_SOURCES) $(factorization_appl_SOURCES) \
	$(fft_prime_appl_SOURCES) $(fpc_appl_SOURCES) \
	$(galois_field_iterator_appl_SOURCES) $(gf2n_appl_SOURCES) \
	$(gf2n_find_root_appl_SOURCES) \
	$(gf2n_poly_modulus_appl_SOURCES) \
	$(gf2n_polynomial_appl_SOURCES) \
	$(gf2n_rational_function_appl_SOURCES) $(gf_pol_appl_SOURCES) \
	$(gf_pol_factor_appl_SOURCES) $(gfpn_appl_SOURCES) \
	$(sparse_power_series_appl_SOURCES)
DIST_SOURCES = $(Fp_pol_factor_appl_SOURCES) \
	$(Fp_polynomial_test_appl_SOURCES) \
	$(Fp_rational_function_appl_SOURCES) $(berlekamp_appl_SOURCES) \
	$(bit_reverse_table_appl_SOURCES) $(can_zass_appl_SOURCES) \
	$(dense_power_series_appl_SOURCES) $(dlp_appl_SOURCES) \
	$(dpsr_udigit_mod_appl_SOURCES) $(factorization_appl_SOURCES) \
	$(fft_prime_appl_SOURCES) $(fpc_appl_SOURCES) \
	$(galois_field_iterator_appl_SOURCES) $(gf2n_appl_SOURCES) \
	$(gf2n_find_root_appl_SOURCES) \
	$(gf2n_poly_modulus_appl_SOURCES) \
	$(gf2n_polynomial_appl_SOURCES) \
	$(gf2n_rational_function_appl_SOURCES) $(gf_pol_appl_SOURCES) \
	$(gf_pol_factor_appl_SOURCES) $(gfpn_appl_SOURCES) \
	$(sparse_power_series_appl_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.13
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = autoconf
AUTOHEADER = :
AUTOMAKE = automake-1.13
AWK = awk
BIBTEX = bibtex
BUNZIP2 = bunzip2
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = g++ -E
CPPFLAGS =   -I/Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/dest/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = dsymutil
DUMPBIN = 
DVIPS = dvips
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GREP = /usr/bin/grep
GUNZIP = gunzip
INSTALL = /usr/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LATEX = latex
LATEX2HTML = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/missing latex2html
LD = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
LDFLAGS = 
LIBOBJS = 
LIBS =  -L/Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/dest/lib -lgmp
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIDIA_BASE_XLIBOBJS = 
LIDIA_BASE_XLTLIBOBJS = 
LIDIA_LTCLIBS = ${LIDIA_LA_LTCLIB} ${LIDIA_FF_LTCLIB} ${LIDIA_BASE_LTCLIB}
LIDIA_LT_XLIBOBJS =  lattice_modules_instant.o
LIDIA_LT_XLTLIBOBJS =  lattice_modules_instant.lo
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
MAKEINDEX = makeindex
MAKEINFO = makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/local/bin/gmkdir -p
NM = /usr/bin/nm -B
NMEDIT = nmedit
OBJDUMP = objdump
OBJEXT = o
OTOOL = otool
OTOOL64 = :
PACKAGE = lidia
PACKAGE_BUGREPORT = lidia@cdc.informatik.tu-darmstadt.de
PACKAGE_NAME = LiDIA
PACKAGE_STRING = LiDIA 2.3.0+latte-patches-2014-10-04
PACKAGE_TARNAME = lidia
PACKAGE_URL = 
PACKAGE_VERSION = 2.3.0+latte-patches-2014-10-04
PATH_SEPARATOR = :
PDFLATEX = pdflatex
PKG_DIRS = base finite_fields linear_algebra
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TEXI2DVI = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/missing texi2dvi
VERSION = 2.3.0+latte-patches-2014-10-04
abs_builddir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/examples/finite_fields
abs_srcdir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/examples/finite_fields
abs_top_builddir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04
abs_top_srcdir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = i386-apple-darwin22.3.0
build_alias = 
build_cpu = i386
build_os = darwin22.3.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-apple-darwin22.3.0
host_alias = 
host_cpu = i386
host_os = darwin22.3.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/dest
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
AUTOMAKE_OPTIONS = 1.5 nostdinc
ETAGS_ARGS = -C -l c++

#
# Use the following prefix for stuff that is normally found in ${top_srcdir}
# but must be specified in a simple-minded fashion (i.e. ${top_builddir}).
# Note that the normal path can be made by prepending ${srcdir}/,
# though that results in weird paths like ../../../library/base/../../xxx.
#
topdir = ${top_builddir}

#
# Main directories of the LiDIA packages
#
LIDIA_DATADIR = ${topdir}/share
LIDIA_PKGDATADIR = ${LIDIA_DATADIR}/LiDIA
LIDIA_CONFIG_LINKDIR = ${top_builddir}/src/base/interfaces
LIDIA_CONFIG_SRCDIR = ${topdir}/src/interfaces
LIDIA_CONFIG_INCLUDEDIR = ${top_builddir}/include
LIDIA_CONFIG_PKGINCLUDEDIR = ${LIDIA_CONFIG_INCLUDEDIR}/LiDIA
LIDIA_PORTAB_SRCDIR = ${topdir}/src/portability
LIDIA_BASE_SRCDIR = ${topdir}/src/base
LIDIA_BASE_INCLUDEDIR = ${LIDIA_BASE_SRCDIR}/include
LIDIA_BASE_PKGINCLUDEDIR = ${LIDIA_BASE_INCLUDEDIR}/LiDIA
LIDIA_FF_SRCDIR = ${topdir}/src/finite_fields
LIDIA_FF_INCLUDEDIR = ${LIDIA_FF_SRCDIR}/include
LIDIA_FF_PKGINCLUDEDIR = ${LIDIA_FF_INCLUDEDIR}/LiDIA
LIDIA_LA_SRCDIR = ${topdir}/src/linear_algebra
LIDIA_LA_INCLUDEDIR = ${LIDIA_LA_SRCDIR}/include
LIDIA_LA_PKGINCLUDEDIR = ${LIDIA_LA_INCLUDEDIR}/LiDIA
LIDIA_LT_SRCDIR = ${topdir}/src/lattices
LIDIA_LT_INCLUDEDIR = ${LIDIA_LT_SRCDIR}/include
LIDIA_LT_PKGINCLUDEDIR = ${LIDIA_LT_INCLUDEDIR}/LiDIA
LIDIA_NF_SRCDIR = ${topdir}/src/number_fields
LIDIA_NF_INCLUDEDIR = ${LIDIA_NF_SRCDIR}/include
LIDIA_NF_PKGINCLUDEDIR = ${LIDIA_NF_INCLUDEDIR}/LiDIA
LIDIA_EC_SRCDIR = ${topdir}/src/elliptic_curves
LIDIA_EC_INCLUDEDIR = ${LIDIA_EC_SRCDIR}/include
LIDIA_EC_PKGINCLUDEDIR = ${LIDIA_EC_INCLUDEDIR}/LiDIA
LIDIA_ECO_SRCDIR = ${topdir}/src/ec_order
LIDIA_ECO_INCLUDEDIR = ${LIDIA_ECO_SRCDIR}/include
LIDIA_ECO_PKGINCLUDEDIR = ${LIDIA_ECO_INCLUDEDIR}/LiDIA
LIDIA_GEC_SRCDIR = ${topdir}/src/gec
LIDIA_GEC_INCLUDEDIR = ${LIDIA_GEC_SRCDIR}/include
LIDIA_GEC_PKGINCLUDEDIR = ${LIDIA_GEC_INCLUDEDIR}/LiDIA

#
# Path to the Libtool library libLiDIA.la resulting from the build
#
LIDIA_LTLIB = ${top_builddir}/library/libLiDIA.la

#
# libLiDIA's version info for Libtool,
# specified as a triplet CURRENT:REVISION:AGE of non-negative integers.
# CURRENT identifies the set of object interfaces exported by the library.
# REVISION specifies CURRENT's implementation release number.
# AGE specifies how many interface sets preceding CURRENT are supported.
# The precise meaning of the version info numbers is defined in the Libtool
# texinfo manual, together with rules for updating them.
# Never try to achieve similarity with the package version!
#
LIDIA_LTVERSION = 7:0:0

#
# Paths to each package's Libtool convenience library.
# The configure-determined variable LIDIA_LTCLIBS refers
# to a subset of these variables.
#
LIDIA_BASE_LTCLIB = ${top_builddir}/library/base/libLiDIA-base.la
LIDIA_FF_LTCLIB = ${top_builddir}/library/finite_fields/libLiDIA-FF.la
LIDIA_LA_LTCLIB = ${top_builddir}/library/linear_algebra/libLiDIA-LA.la
LIDIA_LT_LTCLIB = ${top_builddir}/library/lattices/libLiDIA-LT.la
LIDIA_NF_LTCLIB = ${top_builddir}/library/number_fields/libLiDIA-NF.la
LIDIA_EC_LTCLIB = ${top_builddir}/library/elliptic_curves/libLiDIA-EC.la
LIDIA_ECO_LTCLIB = ${top_builddir}/library/ec_order/libLiDIA-ECO.la
LIDIA_GEC_LTCLIB = ${top_builddir}/library/gec/libLiDIA-GEC.la
AM_CPPFLAGS = \
	-I$(LIDIA_CONFIG_INCLUDEDIR) \
	-I$(LIDIA_BASE_INCLUDEDIR) -I$(srcdir)/$(LIDIA_BASE_INCLUDEDIR) \
	-I$(LIDIA_FF_INCLUDEDIR) -I$(srcdir)/$(LIDIA_FF_INCLUDEDIR)

applexecdir = $(pkglibdir)/examples
LDADD = $(LIDIA_LTLIB)
factorization_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc

Fp_polynomial_test_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc

Fp_rational_function_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc

dlp_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc

fpc_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc

Fp_pol_factor_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc

berlekamp_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc

can_zass_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc

gf_pol_factor_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc

bit_reverse_table_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc

fft_prime_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc

gf2n_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc

gf2n_find_root_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc

gf2n_poly_modulus_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc

gf2n_polynomial_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc

gf2n_rational_function_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc

gf_pol_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc

gfpn_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc

galois_field_iterator_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc

dense_power_series_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc

dpsr_udigit_mod_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc

sparse_power_series_appl_SOURCES = \
	$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc

EXTRA_DIST = \
	${LIDIA_FF_SRCDIR}/Fp_polynomial/Fp_poly_modulus_timing.cc \
	${LIDIA_FF_SRCDIR}/fft_prime/test_mul_mod.cc \
	${LIDIA_FF_SRCDIR}/gf2n/gf2n_timing.cc \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_poly_modulus_appl.cc.asli \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_poly_modulus_timing.cc \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/gf2n_polynomial_timing.cc \
	${LIDIA_FF_SRCDIR}/gfpn/gfpn_timings_appl.cc

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Paths.def $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu examples/finite_fields/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu examples/finite_fields/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Paths.def:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-applexecPROGRAMS: $(applexec_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(applexec_PROGRAMS)'; test -n "$(applexecdir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(applexecdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(applexecdir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(applexecdir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(applexecdir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-applexecPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(applexec_PROGRAMS)'; test -n "$(applexecdir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(applexecdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(applexecdir)" && rm -f $$files

clean-applexecPROGRAMS:
	@list='$(applexec_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

Fp_pol_factor_appl$(EXEEXT): $(Fp_pol_factor_appl_OBJECTS) $(Fp_pol_factor_appl_DEPENDENCIES) $(EXTRA_Fp_pol_factor_appl_DEPENDENCIES) 
	@rm -f Fp_pol_factor_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Fp_pol_factor_appl_OBJECTS) $(Fp_pol_factor_appl_LDADD) $(LIBS)

Fp_polynomial_test_appl$(EXEEXT): $(Fp_polynomial_test_appl_OBJECTS) $(Fp_polynomial_test_appl_DEPENDENCIES) $(EXTRA_Fp_polynomial_test_appl_DEPENDENCIES) 
	@rm -f Fp_polynomial_test_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Fp_polynomial_test_appl_OBJECTS) $(Fp_polynomial_test_appl_LDADD) $(LIBS)

Fp_rational_function_appl$(EXEEXT): $(Fp_rational_function_appl_OBJECTS) $(Fp_rational_function_appl_DEPENDENCIES) $(EXTRA_Fp_rational_function_appl_DEPENDENCIES) 
	@rm -f Fp_rational_function_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Fp_rational_function_appl_OBJECTS) $(Fp_rational_function_appl_LDADD) $(LIBS)

berlekamp_appl$(EXEEXT): $(berlekamp_appl_OBJECTS) $(berlekamp_appl_DEPENDENCIES) $(EXTRA_berlekamp_appl_DEPENDENCIES) 
	@rm -f berlekamp_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(berlekamp_appl_OBJECTS) $(berlekamp_appl_LDADD) $(LIBS)

bit_reverse_table_appl$(EXEEXT): $(bit_reverse_table_appl_OBJECTS) $(bit_reverse_table_appl_DEPENDENCIES) $(EXTRA_bit_reverse_table_appl_DEPENDENCIES) 
	@rm -f bit_reverse_table_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(bit_reverse_table_appl_OBJECTS) $(bit_reverse_table_appl_LDADD) $(LIBS)

can_zass_appl$(EXEEXT): $(can_zass_appl_OBJECTS) $(can_zass_appl_DEPENDENCIES) $(EXTRA_can_zass_appl_DEPENDENCIES) 
	@rm -f can_zass_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(can_zass_appl_OBJECTS) $(can_zass_appl_LDADD) $(LIBS)

dense_power_series_appl$(EXEEXT): $(dense_power_series_appl_OBJECTS) $(dense_power_series_appl_DEPENDENCIES) $(EXTRA_dense_power_series_appl_DEPENDENCIES) 
	@rm -f dense_power_series_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(dense_power_series_appl_OBJECTS) $(dense_power_series_appl_LDADD) $(LIBS)

dlp_appl$(EXEEXT): $(dlp_appl_OBJECTS) $(dlp_appl_DEPENDENCIES) $(EXTRA_dlp_appl_DEPENDENCIES) 
	@rm -f dlp_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(dlp_appl_OBJECTS) $(dlp_appl_LDADD) $(LIBS)

dpsr_udigit_mod_appl$(EXEEXT): $(dpsr_udigit_mod_appl_OBJECTS) $(dpsr_udigit_mod_appl_DEPENDENCIES) $(EXTRA_dpsr_udigit_mod_appl_DEPENDENCIES) 
	@rm -f dpsr_udigit_mod_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(dpsr_udigit_mod_appl_OBJECTS) $(dpsr_udigit_mod_appl_LDADD) $(LIBS)

factorization_appl$(EXEEXT): $(factorization_appl_OBJECTS) $(factorization_appl_DEPENDENCIES) $(EXTRA_factorization_appl_DEPENDENCIES) 
	@rm -f factorization_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(factorization_appl_OBJECTS) $(factorization_appl_LDADD) $(LIBS)

fft_prime_appl$(EXEEXT): $(fft_prime_appl_OBJECTS) $(fft_prime_appl_DEPENDENCIES) $(EXTRA_fft_prime_appl_DEPENDENCIES) 
	@rm -f fft_prime_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(fft_prime_appl_OBJECTS) $(fft_prime_appl_LDADD) $(LIBS)

fpc_appl$(EXEEXT): $(fpc_appl_OBJECTS) $(fpc_appl_DEPENDENCIES) $(EXTRA_fpc_appl_DEPENDENCIES) 
	@rm -f fpc_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(fpc_appl_OBJECTS) $(fpc_appl_LDADD) $(LIBS)

galois_field_iterator_appl$(EXEEXT): $(galois_field_iterator_appl_OBJECTS) $(galois_field_iterator_appl_DEPENDENCIES) $(EXTRA_galois_field_iterator_appl_DEPENDENCIES) 
	@rm -f galois_field_iterator_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(galois_field_iterator_appl_OBJECTS) $(galois_field_iterator_appl_LDADD) $(LIBS)

gf2n_appl$(EXEEXT): $(gf2n_appl_OBJECTS) $(gf2n_appl_DEPENDENCIES) $(EXTRA_gf2n_appl_DEPENDENCIES) 
	@rm -f gf2n_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf2n_appl_OBJECTS) $(gf2n_appl_LDADD) $(LIBS)

gf2n_find_root_appl$(EXEEXT): $(gf2n_find_root_appl_OBJECTS) $(gf2n_find_root_appl_DEPENDENCIES) $(EXTRA_gf2n_find_root_appl_DEPENDENCIES) 
	@rm -f gf2n_find_root_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf2n_find_root_appl_OBJECTS) $(gf2n_find_root_appl_LDADD) $(LIBS)

gf2n_poly_modulus_appl$(EXEEXT): $(gf2n_poly_modulus_appl_OBJECTS) $(gf2n_poly_modulus_appl_DEPENDENCIES) $(EXTRA_gf2n_poly_modulus_appl_DEPENDENCIES) 
	@rm -f gf2n_poly_modulus_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf2n_poly_modulus_appl_OBJECTS) $(gf2n_poly_modulus_appl_LDADD) $(LIBS)

gf2n_polynomial_appl$(EXEEXT): $(gf2n_polynomial_appl_OBJECTS) $(gf2n_polynomial_appl_DEPENDENCIES) $(EXTRA_gf2n_polynomial_appl_DEPENDENCIES) 
	@rm -f gf2n_polynomial_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf2n_polynomial_appl_OBJECTS) $(gf2n_polynomial_appl_LDADD) $(LIBS)

gf2n_rational_function_appl$(EXEEXT): $(gf2n_rational_function_appl_OBJECTS) $(gf2n_rational_function_appl_DEPENDENCIES) $(EXTRA_gf2n_rational_function_appl_DEPENDENCIES) 
	@rm -f gf2n_rational_function_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf2n_rational_function_appl_OBJECTS) $(gf2n_rational_function_appl_LDADD) $(LIBS)

gf_pol_appl$(EXEEXT): $(gf_pol_appl_OBJECTS) $(gf_pol_appl_DEPENDENCIES) $(EXTRA_gf_pol_appl_DEPENDENCIES) 
	@rm -f gf_pol_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf_pol_appl_OBJECTS) $(gf_pol_appl_LDADD) $(LIBS)

gf_pol_factor_appl$(EXEEXT): $(gf_pol_factor_appl_OBJECTS) $(gf_pol_factor_appl_DEPENDENCIES) $(EXTRA_gf_pol_factor_appl_DEPENDENCIES) 
	@rm -f gf_pol_factor_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gf_pol_factor_appl_OBJECTS) $(gf_pol_factor_appl_LDADD) $(LIBS)

gfpn_appl$(EXEEXT): $(gfpn_appl_OBJECTS) $(gfpn_appl_DEPENDENCIES) $(EXTRA_gfpn_appl_DEPENDENCIES) 
	@rm -f gfpn_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gfpn_appl_OBJECTS) $(gfpn_appl_LDADD) $(LIBS)

sparse_power_series_appl$(EXEEXT): $(sparse_power_series_appl_OBJECTS) $(sparse_power_series_appl_DEPENDENCIES) $(EXTRA_sparse_power_series_appl_DEPENDENCIES) 
	@rm -f sparse_power_series_appl$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(sparse_power_series_appl_OBJECTS) $(sparse_power_series_appl_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Fp_pol_factor_appl.Po
include ./$(DEPDIR)/Fp_polynomial_test_appl.Po
include ./$(DEPDIR)/Fp_rational_function_appl.Po
include ./$(DEPDIR)/berlekamp_appl.Po
include ./$(DEPDIR)/bit_reverse_table_appl.Po
include ./$(DEPDIR)/can_zass_appl.Po
include ./$(DEPDIR)/dense_power_series_appl.Po
include ./$(DEPDIR)/dlp_appl.Po
include ./$(DEPDIR)/dpsr_udigit_mod_appl.Po
include ./$(DEPDIR)/factorization_appl.Po
include ./$(DEPDIR)/fft_prime_appl.Po
include ./$(DEPDIR)/fpc_appl.Po
include ./$(DEPDIR)/galois_field_iterator_appl.Po
include ./$(DEPDIR)/gf2n_appl.Po
include ./$(DEPDIR)/gf2n_find_root_appl.Po
include ./$(DEPDIR)/gf2n_poly_modulus_appl.Po
include ./$(DEPDIR)/gf2n_polynomial_appl.Po
include ./$(DEPDIR)/gf2n_rational_function_appl.Po
include ./$(DEPDIR)/gf_pol_appl.Po
include ./$(DEPDIR)/gf_pol_factor_appl.Po
include ./$(DEPDIR)/gfpn_appl.Po
include ./$(DEPDIR)/sparse_power_series_appl.Po

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

Fp_pol_factor_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_factor_appl.o -MD -MP -MF $(DEPDIR)/Fp_pol_factor_appl.Tpo -c -o Fp_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_pol_factor_appl.Tpo $(DEPDIR)/Fp_pol_factor_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' object='Fp_pol_factor_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc

Fp_pol_factor_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_factor_appl.obj -MD -MP -MF $(DEPDIR)/Fp_pol_factor_appl.Tpo -c -o Fp_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_pol_factor_appl.Tpo $(DEPDIR)/Fp_pol_factor_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc' object='Fp_pol_factor_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_pol_factor_appl.cc'; fi`

Fp_polynomial_test_appl.o: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_polynomial_test_appl.o -MD -MP -MF $(DEPDIR)/Fp_polynomial_test_appl.Tpo -c -o Fp_polynomial_test_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_polynomial_test_appl.Tpo $(DEPDIR)/Fp_polynomial_test_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' object='Fp_polynomial_test_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_polynomial_test_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc

Fp_polynomial_test_appl.obj: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_polynomial_test_appl.obj -MD -MP -MF $(DEPDIR)/Fp_polynomial_test_appl.Tpo -c -o Fp_polynomial_test_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_polynomial_test_appl.Tpo $(DEPDIR)/Fp_polynomial_test_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc' object='Fp_polynomial_test_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_polynomial_test_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial_test_appl.cc'; fi`

Fp_rational_function_appl.o: $(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_rational_function_appl.o -MD -MP -MF $(DEPDIR)/Fp_rational_function_appl.Tpo -c -o Fp_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_rational_function_appl.Tpo $(DEPDIR)/Fp_rational_function_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' object='Fp_rational_function_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc

Fp_rational_function_appl.obj: $(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_rational_function_appl.obj -MD -MP -MF $(DEPDIR)/Fp_rational_function_appl.Tpo -c -o Fp_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_rational_function_appl.Tpo $(DEPDIR)/Fp_rational_function_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc' object='Fp_rational_function_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function_appl.cc'; fi`

berlekamp_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT berlekamp_appl.o -MD -MP -MF $(DEPDIR)/berlekamp_appl.Tpo -c -o berlekamp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/berlekamp_appl.Tpo $(DEPDIR)/berlekamp_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' object='berlekamp_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o berlekamp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc

berlekamp_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT berlekamp_appl.obj -MD -MP -MF $(DEPDIR)/berlekamp_appl.Tpo -c -o berlekamp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/berlekamp_appl.Tpo $(DEPDIR)/berlekamp_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc' object='berlekamp_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o berlekamp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp_appl.cc'; fi`

bit_reverse_table_appl.o: $(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bit_reverse_table_appl.o -MD -MP -MF $(DEPDIR)/bit_reverse_table_appl.Tpo -c -o bit_reverse_table_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bit_reverse_table_appl.Tpo $(DEPDIR)/bit_reverse_table_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' object='bit_reverse_table_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bit_reverse_table_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc

bit_reverse_table_appl.obj: $(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bit_reverse_table_appl.obj -MD -MP -MF $(DEPDIR)/bit_reverse_table_appl.Tpo -c -o bit_reverse_table_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/bit_reverse_table_appl.Tpo $(DEPDIR)/bit_reverse_table_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc' object='bit_reverse_table_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bit_reverse_table_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table_appl.cc'; fi`

can_zass_appl.o: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT can_zass_appl.o -MD -MP -MF $(DEPDIR)/can_zass_appl.Tpo -c -o can_zass_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/can_zass_appl.Tpo $(DEPDIR)/can_zass_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' object='can_zass_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o can_zass_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc

can_zass_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT can_zass_appl.obj -MD -MP -MF $(DEPDIR)/can_zass_appl.Tpo -c -o can_zass_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/can_zass_appl.Tpo $(DEPDIR)/can_zass_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc' object='can_zass_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o can_zass_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/can_zass_appl.cc'; fi`

dense_power_series_appl.o: $(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dense_power_series_appl.o -MD -MP -MF $(DEPDIR)/dense_power_series_appl.Tpo -c -o dense_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dense_power_series_appl.Tpo $(DEPDIR)/dense_power_series_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' object='dense_power_series_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dense_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc

dense_power_series_appl.obj: $(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dense_power_series_appl.obj -MD -MP -MF $(DEPDIR)/dense_power_series_appl.Tpo -c -o dense_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/dense_power_series_appl.Tpo $(DEPDIR)/dense_power_series_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc' object='dense_power_series_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dense_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dense_power_series_appl.cc'; fi`

dlp_appl.o: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dlp_appl.o -MD -MP -MF $(DEPDIR)/dlp_appl.Tpo -c -o dlp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dlp_appl.Tpo $(DEPDIR)/dlp_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' object='dlp_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dlp_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc

dlp_appl.obj: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dlp_appl.obj -MD -MP -MF $(DEPDIR)/dlp_appl.Tpo -c -o dlp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/dlp_appl.Tpo $(DEPDIR)/dlp_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc' object='dlp_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dlp_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp_appl.cc'; fi`

dpsr_udigit_mod_appl.o: $(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_udigit_mod_appl.o -MD -MP -MF $(DEPDIR)/dpsr_udigit_mod_appl.Tpo -c -o dpsr_udigit_mod_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_udigit_mod_appl.Tpo $(DEPDIR)/dpsr_udigit_mod_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' object='dpsr_udigit_mod_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_udigit_mod_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc

dpsr_udigit_mod_appl.obj: $(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_udigit_mod_appl.obj -MD -MP -MF $(DEPDIR)/dpsr_udigit_mod_appl.Tpo -c -o dpsr_udigit_mod_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_udigit_mod_appl.Tpo $(DEPDIR)/dpsr_udigit_mod_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc' object='dpsr_udigit_mod_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_udigit_mod_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod_appl.cc'; fi`

factorization_appl.o: $(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT factorization_appl.o -MD -MP -MF $(DEPDIR)/factorization_appl.Tpo -c -o factorization_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/factorization_appl.Tpo $(DEPDIR)/factorization_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' object='factorization_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o factorization_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc

factorization_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT factorization_appl.obj -MD -MP -MF $(DEPDIR)/factorization_appl.Tpo -c -o factorization_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/factorization_appl.Tpo $(DEPDIR)/factorization_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc' object='factorization_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o factorization_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/factorization_appl.cc'; fi`

fft_prime_appl.o: $(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_prime_appl.o -MD -MP -MF $(DEPDIR)/fft_prime_appl.Tpo -c -o fft_prime_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fft_prime_appl.Tpo $(DEPDIR)/fft_prime_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' object='fft_prime_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_prime_appl.o `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc

fft_prime_appl.obj: $(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_prime_appl.obj -MD -MP -MF $(DEPDIR)/fft_prime_appl.Tpo -c -o fft_prime_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/fft_prime_appl.Tpo $(DEPDIR)/fft_prime_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc' object='fft_prime_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_prime_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime_appl.cc'; fi`

fpc_appl.o: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fpc_appl.o -MD -MP -MF $(DEPDIR)/fpc_appl.Tpo -c -o fpc_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fpc_appl.Tpo $(DEPDIR)/fpc_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' object='fpc_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fpc_appl.o `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc

fpc_appl.obj: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fpc_appl.obj -MD -MP -MF $(DEPDIR)/fpc_appl.Tpo -c -o fpc_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/fpc_appl.Tpo $(DEPDIR)/fpc_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc' object='fpc_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fpc_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/fpc_appl.cc'; fi`

galois_field_iterator_appl.o: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_iterator_appl.o -MD -MP -MF $(DEPDIR)/galois_field_iterator_appl.Tpo -c -o galois_field_iterator_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/galois_field_iterator_appl.Tpo $(DEPDIR)/galois_field_iterator_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' object='galois_field_iterator_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_iterator_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc

galois_field_iterator_appl.obj: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_iterator_appl.obj -MD -MP -MF $(DEPDIR)/galois_field_iterator_appl.Tpo -c -o galois_field_iterator_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/galois_field_iterator_appl.Tpo $(DEPDIR)/galois_field_iterator_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc' object='galois_field_iterator_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_iterator_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator_appl.cc'; fi`

gf2n_appl.o: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_appl.o -MD -MP -MF $(DEPDIR)/gf2n_appl.Tpo -c -o gf2n_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_appl.Tpo $(DEPDIR)/gf2n_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' object='gf2n_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc

gf2n_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_appl.Tpo -c -o gf2n_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_appl.Tpo $(DEPDIR)/gf2n_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc' object='gf2n_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n/gf2n_appl.cc'; fi`

gf2n_find_root_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_find_root_appl.o -MD -MP -MF $(DEPDIR)/gf2n_find_root_appl.Tpo -c -o gf2n_find_root_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_find_root_appl.Tpo $(DEPDIR)/gf2n_find_root_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' object='gf2n_find_root_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_find_root_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc

gf2n_find_root_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_find_root_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_find_root_appl.Tpo -c -o gf2n_find_root_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_find_root_appl.Tpo $(DEPDIR)/gf2n_find_root_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc' object='gf2n_find_root_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_find_root_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root_appl.cc'; fi`

gf2n_poly_modulus_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_modulus_appl.o -MD -MP -MF $(DEPDIR)/gf2n_poly_modulus_appl.Tpo -c -o gf2n_poly_modulus_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_poly_modulus_appl.Tpo $(DEPDIR)/gf2n_poly_modulus_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' object='gf2n_poly_modulus_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_modulus_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc

gf2n_poly_modulus_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_modulus_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_poly_modulus_appl.Tpo -c -o gf2n_poly_modulus_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_poly_modulus_appl.Tpo $(DEPDIR)/gf2n_poly_modulus_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc' object='gf2n_poly_modulus_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_modulus_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus_appl.cc'; fi`

gf2n_polynomial_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_polynomial_appl.o -MD -MP -MF $(DEPDIR)/gf2n_polynomial_appl.Tpo -c -o gf2n_polynomial_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_polynomial_appl.Tpo $(DEPDIR)/gf2n_polynomial_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' object='gf2n_polynomial_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_polynomial_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc

gf2n_polynomial_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_polynomial_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_polynomial_appl.Tpo -c -o gf2n_polynomial_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_polynomial_appl.Tpo $(DEPDIR)/gf2n_polynomial_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc' object='gf2n_polynomial_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_polynomial_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial_appl.cc'; fi`

gf2n_rational_function_appl.o: $(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_rational_function_appl.o -MD -MP -MF $(DEPDIR)/gf2n_rational_function_appl.Tpo -c -o gf2n_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_rational_function_appl.Tpo $(DEPDIR)/gf2n_rational_function_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' object='gf2n_rational_function_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_rational_function_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc

gf2n_rational_function_appl.obj: $(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_rational_function_appl.obj -MD -MP -MF $(DEPDIR)/gf2n_rational_function_appl.Tpo -c -o gf2n_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_rational_function_appl.Tpo $(DEPDIR)/gf2n_rational_function_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc' object='gf2n_rational_function_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_rational_function_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function_appl.cc'; fi`

gf_pol_appl.o: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_appl.o -MD -MP -MF $(DEPDIR)/gf_pol_appl.Tpo -c -o gf_pol_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_appl.Tpo $(DEPDIR)/gf_pol_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' object='gf_pol_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc

gf_pol_appl.obj: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_appl.obj -MD -MP -MF $(DEPDIR)/gf_pol_appl.Tpo -c -o gf_pol_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_appl.Tpo $(DEPDIR)/gf_pol_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc' object='gf_pol_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_appl.cc'; fi`

gf_pol_factor_appl.o: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_factor_appl.o -MD -MP -MF $(DEPDIR)/gf_pol_factor_appl.Tpo -c -o gf_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_factor_appl.Tpo $(DEPDIR)/gf_pol_factor_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' object='gf_pol_factor_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_factor_appl.o `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc

gf_pol_factor_appl.obj: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_factor_appl.obj -MD -MP -MF $(DEPDIR)/gf_pol_factor_appl.Tpo -c -o gf_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_factor_appl.Tpo $(DEPDIR)/gf_pol_factor_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc' object='gf_pol_factor_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_factor_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_pol_factor_appl.cc'; fi`

gfpn_appl.o: $(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gfpn_appl.o -MD -MP -MF $(DEPDIR)/gfpn_appl.Tpo -c -o gfpn_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gfpn_appl.Tpo $(DEPDIR)/gfpn_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' object='gfpn_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gfpn_appl.o `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc

gfpn_appl.obj: $(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gfpn_appl.obj -MD -MP -MF $(DEPDIR)/gfpn_appl.Tpo -c -o gfpn_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/gfpn_appl.Tpo $(DEPDIR)/gfpn_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc' object='gfpn_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gfpn_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/gfpn/gfpn_appl.cc'; fi`

sparse_power_series_appl.o: $(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sparse_power_series_appl.o -MD -MP -MF $(DEPDIR)/sparse_power_series_appl.Tpo -c -o sparse_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sparse_power_series_appl.Tpo $(DEPDIR)/sparse_power_series_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' object='sparse_power_series_appl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sparse_power_series_appl.o `test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc

sparse_power_series_appl.obj: $(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sparse_power_series_appl.obj -MD -MP -MF $(DEPDIR)/sparse_power_series_appl.Tpo -c -o sparse_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/sparse_power_series_appl.Tpo $(DEPDIR)/sparse_power_series_appl.Po
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc' object='sparse_power_series_appl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sparse_power_series_appl.obj `if test -f '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; then $(CYGPATH_W) '$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; else $(CYGPATH_W) '$(srcdir)/$(LIDIA_FF_SRCDIR)/powser/sparse_power_series_appl.cc'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(applexecdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-applexecPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-applexecPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-applexecPROGRAMS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook
.MAKE: install-am install-strip uninstall-am

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-applexecPROGRAMS clean-generic clean-libtool \
	cscopelist-am ctags ctags-am distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-applexecPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-applexecPROGRAMS uninstall-hook


 #

$(applexec_PROGRAMS): $(LIDIA_LTLIB)

# Remove installation subdirectories after uninstalling, unless left non-empty.
uninstall-hook:
	rmdir	$(DESTDIR)$(applexecdir) \
		$(DESTDIR)$(pkglibdir) \
		2>/dev/null; :

# Delete half-made targets when their commands fail
.DELETE_ON_ERROR:

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
