# Makefile.in generated by automake 1.13.4 from Makefile.am.
# library/finite_fields/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/lidia
pkgincludedir = $(includedir)/lidia
pkglibdir = $(libdir)/lidia
pkglibexecdir = $(libexecdir)/lidia
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i386-apple-darwin22.3.0
host_triplet = i386-apple-darwin22.3.0
DIST_COMMON = $(top_srcdir)/Paths.def $(srcdir)/Makefile.in \
	$(srcdir)/Makefile.am $(top_srcdir)/depcomp \
	$(dist_pkgdata_DATA) $(ffinclude_HEADERS) \
	$(instantinclude_HEADERS) $(pkginclude_HEADERS) \
	$(specialinclude_HEADERS)
subdir = library/finite_fields
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h \
	$(top_builddir)/include/LiDIA/LiDIA.h \
	$(top_builddir)/include/LiDIA/path.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
libLiDIA_FF_la_LIBADD =
am_libLiDIA_FF_la_OBJECTS = Fp_pol_arithmetic.lo Fp_pol_tools.lo \
	Fp_poly_modulus.lo Fp_poly_multiplier.lo Fp_polynomial.lo \
	compose.lo crossover_class.lo factoring.lo fft_arith.lo \
	fft_reps.lo fractions.lo gcd.lo plain_arith.lo \
	poly_argument.lo poly_matrix.lo Fp_rational_function.lo dlp.lo \
	Fp_factor.lo Fp_factor_generic.lo berlekamp.lo binomial.lo \
	canzass.lo ddf.lo edf.lo find_factors.lo old_ddf.lo \
	squarefree.lo checked_min_poly.lo gf_berlekamp.lo \
	gf_can_zass.lo gf_fact_util.lo gf_factor.lo gf_squarefree.lo \
	sf_Fp_polynomial.lo sf_gf_polynomial.lo bit_reverse_table.lo \
	fft_prime.lo gf2n.lo gf2nIO.lo gf2n_init.lo gf2n_invert.lo \
	gf2n_lib.lo gf2n_mult.lo gf2n_reduce.lo gf2nin.lo gf2nout.lo \
	gf2n_find_root.lo gf2n_poly_karatzuba.lo gf2n_poly_modulus.lo \
	gf2n_poly_remainder.lo gf2n_polynomial.lo \
	gf2n_rational_function.lo gf_pol_arith.lo gf_pol_instant.lo \
	gf_pol_util.lo gf_poly_argument.lo gf_poly_modulus.lo \
	gf_polynomial.lo galois_field.lo galois_field_iterator.lo \
	galois_field_rep.lo gf_element.lo gf_rep_GF2n.lo gf_rep_GFp.lo \
	gf_rep_GFpn.lo info_gf2n.lo info_gf2n_inv.lo info_gf2n_mul.lo \
	info_gf2n_red.lo bpf_gf2n.lo bpf_gf_element.lo \
	bv_Fp_polynomial.lo bv_gf2n.lo bv_gf_element.lo \
	bv_pp_sf_Fp_polynomial.lo bv_pp_sf_gf_polynomial.lo \
	bv_spc_bigint.lo bv_spc_bigmod.lo bv_spc_bigrational.lo \
	bv_spc_udigit_mod.lo dpsr_bigint.lo dpsr_bigrational.lo \
	fact_Fp_polynomial.lo fact_gf_polynomial.lo lpf_gf2n.lo \
	spsr_bigint.lo spsr_bigrational.lo spsr_udigit_mod.lo \
	sv_pp_sf_Fp_polynomial.lo sv_pp_sf_gf_polynomial.lo \
	sv_spc_bigint.lo sv_spc_bigmod.lo sv_spc_bigrational.lo \
	sv_spc_udigit_mod.lo dpsr_bigmod.lo dpsr_udigit_mod.lo \
	spsr_bigmod.lo
libLiDIA_FF_la_OBJECTS = $(am_libLiDIA_FF_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = 
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(libLiDIA_FF_la_SOURCES)
DIST_SOURCES = $(libLiDIA_FF_la_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(pkgdatadir)" \
	"$(DESTDIR)$(ffincludedir)" "$(DESTDIR)$(instantincludedir)" \
	"$(DESTDIR)$(pkgincludedir)" "$(DESTDIR)$(specialincludedir)"
DATA = $(dist_pkgdata_DATA)
HEADERS = $(ffinclude_HEADERS) $(instantinclude_HEADERS) \
	$(pkginclude_HEADERS) $(specialinclude_HEADERS)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.13
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AR = ar
AUTOCONF = autoconf
AUTOHEADER = :
AUTOMAKE = automake-1.13
AWK = awk
BIBTEX = bibtex
BUNZIP2 = bunzip2
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = g++ -E
CPPFLAGS =   -I/Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/dest/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -O3
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = dsymutil
DUMPBIN = 
DVIPS = dvips
ECHO_C = \c
ECHO_N = 
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
GREP = /usr/bin/grep
GUNZIP = gunzip
INSTALL = /usr/local/bin/ginstall -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LATEX = latex
LATEX2HTML = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/missing latex2html
LD = /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld
LDFLAGS = 
LIBOBJS = 

# We don't want to have $(LIBS) in the convenience library.
# FIXME: This is not safe against command-line overrides.
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIDIA_BASE_XLIBOBJS = 
LIDIA_BASE_XLTLIBOBJS = 
LIDIA_LTCLIBS = ${LIDIA_LA_LTCLIB} ${LIDIA_FF_LTCLIB} ${LIDIA_BASE_LTCLIB}
LIDIA_LT_XLIBOBJS =  lattice_modules_instant.o
LIDIA_LT_XLTLIBOBJS =  lattice_modules_instant.lo
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
MAKEINDEX = makeindex
MAKEINFO = makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/local/bin/gmkdir -p
NM = /usr/bin/nm -B
NMEDIT = nmedit
OBJDUMP = objdump
OBJEXT = o
OTOOL = otool
OTOOL64 = :
PACKAGE = lidia
PACKAGE_BUGREPORT = lidia@cdc.informatik.tu-darmstadt.de
PACKAGE_NAME = LiDIA
PACKAGE_STRING = LiDIA 2.3.0+latte-patches-2014-10-04
PACKAGE_TARNAME = lidia
PACKAGE_URL = 
PACKAGE_VERSION = 2.3.0+latte-patches-2014-10-04
PATH_SEPARATOR = :
PDFLATEX = pdflatex
PKG_DIRS = base finite_fields linear_algebra
RANLIB = ranlib
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TEXI2DVI = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/missing texi2dvi
VERSION = 2.3.0+latte-patches-2014-10-04
abs_builddir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/library/finite_fields
abs_srcdir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/library/finite_fields
abs_top_builddir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04
abs_top_srcdir = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = 
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=ustar -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = i386-apple-darwin22.3.0
build_alias = 
build_cpu = i386
build_os = darwin22.3.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-apple-darwin22.3.0
host_alias = 
host_cpu = i386
host_os = darwin22.3.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/lidia-2.3.0+latte-patches-2014-10-04/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /Users/nikita/Desktop/Diploma_Project/latte-integrale-1.7.4/dest
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
AUTOMAKE_OPTIONS = 1.5 nostdinc
ETAGS_ARGS = -C -l c++

#
# Use the following prefix for stuff that is normally found in ${top_srcdir}
# but must be specified in a simple-minded fashion (i.e. ${top_builddir}).
# Note that the normal path can be made by prepending ${srcdir}/,
# though that results in weird paths like ../../../library/base/../../xxx.
#
topdir = ${top_builddir}

#
# Main directories of the LiDIA packages
#
LIDIA_DATADIR = ${topdir}/share
LIDIA_PKGDATADIR = ${LIDIA_DATADIR}/LiDIA
LIDIA_CONFIG_LINKDIR = ${top_builddir}/src/base/interfaces
LIDIA_CONFIG_SRCDIR = ${topdir}/src/interfaces
LIDIA_CONFIG_INCLUDEDIR = ${top_builddir}/include
LIDIA_CONFIG_PKGINCLUDEDIR = ${LIDIA_CONFIG_INCLUDEDIR}/LiDIA
LIDIA_PORTAB_SRCDIR = ${topdir}/src/portability
LIDIA_BASE_SRCDIR = ${topdir}/src/base
LIDIA_BASE_INCLUDEDIR = ${LIDIA_BASE_SRCDIR}/include
LIDIA_BASE_PKGINCLUDEDIR = ${LIDIA_BASE_INCLUDEDIR}/LiDIA
LIDIA_FF_SRCDIR = ${topdir}/src/finite_fields
LIDIA_FF_INCLUDEDIR = ${LIDIA_FF_SRCDIR}/include
LIDIA_FF_PKGINCLUDEDIR = ${LIDIA_FF_INCLUDEDIR}/LiDIA
LIDIA_LA_SRCDIR = ${topdir}/src/linear_algebra
LIDIA_LA_INCLUDEDIR = ${LIDIA_LA_SRCDIR}/include
LIDIA_LA_PKGINCLUDEDIR = ${LIDIA_LA_INCLUDEDIR}/LiDIA
LIDIA_LT_SRCDIR = ${topdir}/src/lattices
LIDIA_LT_INCLUDEDIR = ${LIDIA_LT_SRCDIR}/include
LIDIA_LT_PKGINCLUDEDIR = ${LIDIA_LT_INCLUDEDIR}/LiDIA
LIDIA_NF_SRCDIR = ${topdir}/src/number_fields
LIDIA_NF_INCLUDEDIR = ${LIDIA_NF_SRCDIR}/include
LIDIA_NF_PKGINCLUDEDIR = ${LIDIA_NF_INCLUDEDIR}/LiDIA
LIDIA_EC_SRCDIR = ${topdir}/src/elliptic_curves
LIDIA_EC_INCLUDEDIR = ${LIDIA_EC_SRCDIR}/include
LIDIA_EC_PKGINCLUDEDIR = ${LIDIA_EC_INCLUDEDIR}/LiDIA
LIDIA_ECO_SRCDIR = ${topdir}/src/ec_order
LIDIA_ECO_INCLUDEDIR = ${LIDIA_ECO_SRCDIR}/include
LIDIA_ECO_PKGINCLUDEDIR = ${LIDIA_ECO_INCLUDEDIR}/LiDIA
LIDIA_GEC_SRCDIR = ${topdir}/src/gec
LIDIA_GEC_INCLUDEDIR = ${LIDIA_GEC_SRCDIR}/include
LIDIA_GEC_PKGINCLUDEDIR = ${LIDIA_GEC_INCLUDEDIR}/LiDIA

#
# Path to the Libtool library libLiDIA.la resulting from the build
#
LIDIA_LTLIB = ${top_builddir}/library/libLiDIA.la

#
# libLiDIA's version info for Libtool,
# specified as a triplet CURRENT:REVISION:AGE of non-negative integers.
# CURRENT identifies the set of object interfaces exported by the library.
# REVISION specifies CURRENT's implementation release number.
# AGE specifies how many interface sets preceding CURRENT are supported.
# The precise meaning of the version info numbers is defined in the Libtool
# texinfo manual, together with rules for updating them.
# Never try to achieve similarity with the package version!
#
LIDIA_LTVERSION = 7:0:0

#
# Paths to each package's Libtool convenience library.
# The configure-determined variable LIDIA_LTCLIBS refers
# to a subset of these variables.
#
LIDIA_BASE_LTCLIB = ${top_builddir}/library/base/libLiDIA-base.la
LIDIA_FF_LTCLIB = ${top_builddir}/library/finite_fields/libLiDIA-FF.la
LIDIA_LA_LTCLIB = ${top_builddir}/library/linear_algebra/libLiDIA-LA.la
LIDIA_LT_LTCLIB = ${top_builddir}/library/lattices/libLiDIA-LT.la
LIDIA_NF_LTCLIB = ${top_builddir}/library/number_fields/libLiDIA-NF.la
LIDIA_EC_LTCLIB = ${top_builddir}/library/elliptic_curves/libLiDIA-EC.la
LIDIA_ECO_LTCLIB = ${top_builddir}/library/ec_order/libLiDIA-ECO.la
LIDIA_GEC_LTCLIB = ${top_builddir}/library/gec/libLiDIA-GEC.la
AM_CPPFLAGS = \
	-I$(LIDIA_CONFIG_INCLUDEDIR) \
	-I$(LIDIA_BASE_INCLUDEDIR) -I$(srcdir)/$(LIDIA_BASE_INCLUDEDIR) \
	-I$(LIDIA_FF_INCLUDEDIR) -I$(srcdir)/$(LIDIA_FF_INCLUDEDIR)

noinst_LTLIBRARIES = libLiDIA-FF.la
libLiDIA_FF_la_SOURCES = \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc \
	$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc \
	$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc \
	$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc \
	$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc \
	$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc \
	$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc \
	$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc \
	$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc \
	$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc \
	$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc \
	$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc \
	$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc \
	$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc \
	$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc

instantincludedir = $(pkgincludedir)/instantiate
specialincludedir = $(pkgincludedir)/specialization
ffincludedir = $(pkgincludedir)/finite_fields
instantinclude_HEADERS = \
	$(LIDIA_FF_PKGINCLUDEDIR)/instantiate/power_series.cc

specialinclude_HEADERS = \
	$(LIDIA_FF_PKGINCLUDEDIR)/specialization/Fp_polynomial.special \
	$(LIDIA_FF_PKGINCLUDEDIR)/specialization/dense_power_series.special \
	$(LIDIA_FF_PKGINCLUDEDIR)/specialization/gf_element.special \
	$(LIDIA_FF_PKGINCLUDEDIR)/specialization/gf_polynomial.special

ffinclude_HEADERS = \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/Fp_polynomial_fft.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/Fp_polynomial_util.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/base_dense_power_series.cc \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/base_dense_power_series.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/base_sparse_power_series.cc \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/base_sparse_power_series.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/bit_reverse_table.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/coeff_sparse_power_series.cc \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/coeff_sparse_power_series.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/dense_power_series_bigmod.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/dense_power_series_udigit_mod.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/fft_mul_mod.inl \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/galois_field_rep.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/gf2nIO.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/info_gf2n.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/sf_Fp_polynomial.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/finite_fields/sf_gf_polynomial.h

pkginclude_HEADERS = \
	$(LIDIA_FF_PKGINCLUDEDIR)/Fp_pol_crossover.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/Fp_poly_modulus.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/Fp_poly_multiplier.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/Fp_polynomial.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/Fp_rational_function.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/dense_power_series.cc \
	$(LIDIA_FF_PKGINCLUDEDIR)/dense_power_series.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/dlp.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/fft_prime.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/galois_field.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/galois_field_iterator.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf2n.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf2n_poly_modulus.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf2n_polynomial.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf2n_rational_function.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf_element.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/gf_polynomial.h \
	$(LIDIA_FF_PKGINCLUDEDIR)/sparse_power_series.cc \
	$(LIDIA_FF_PKGINCLUDEDIR)/sparse_power_series.h

dist_pkgdata_DATA = \
	$(LIDIA_PKGDATADIR)/GF2n.database

EXTRA_DIST = \
	${LIDIA_FF_SRCDIR}/Fp_polynomial/crossover.tbl \
	${LIDIA_FF_SRCDIR}/Fp_polynomial/crossover.tbl.default \
	${LIDIA_FF_SRCDIR}/Fp_polynomial/make_crossover.cc \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/crossover.tbl \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/crossover.tbl.default \
	${LIDIA_FF_SRCDIR}/gf2n_polynomial/make_crossover.cc

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Paths.def $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu library/finite_fields/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu library/finite_fields/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Paths.def:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}

libLiDIA-FF.la: $(libLiDIA_FF_la_OBJECTS) $(libLiDIA_FF_la_DEPENDENCIES) $(EXTRA_libLiDIA_FF_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(CXXLINK)  $(libLiDIA_FF_la_OBJECTS) $(libLiDIA_FF_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Fp_factor.Plo
include ./$(DEPDIR)/Fp_factor_generic.Plo
include ./$(DEPDIR)/Fp_pol_arithmetic.Plo
include ./$(DEPDIR)/Fp_pol_tools.Plo
include ./$(DEPDIR)/Fp_poly_modulus.Plo
include ./$(DEPDIR)/Fp_poly_multiplier.Plo
include ./$(DEPDIR)/Fp_polynomial.Plo
include ./$(DEPDIR)/Fp_rational_function.Plo
include ./$(DEPDIR)/berlekamp.Plo
include ./$(DEPDIR)/binomial.Plo
include ./$(DEPDIR)/bit_reverse_table.Plo
include ./$(DEPDIR)/bpf_gf2n.Plo
include ./$(DEPDIR)/bpf_gf_element.Plo
include ./$(DEPDIR)/bv_Fp_polynomial.Plo
include ./$(DEPDIR)/bv_gf2n.Plo
include ./$(DEPDIR)/bv_gf_element.Plo
include ./$(DEPDIR)/bv_pp_sf_Fp_polynomial.Plo
include ./$(DEPDIR)/bv_pp_sf_gf_polynomial.Plo
include ./$(DEPDIR)/bv_spc_bigint.Plo
include ./$(DEPDIR)/bv_spc_bigmod.Plo
include ./$(DEPDIR)/bv_spc_bigrational.Plo
include ./$(DEPDIR)/bv_spc_udigit_mod.Plo
include ./$(DEPDIR)/canzass.Plo
include ./$(DEPDIR)/checked_min_poly.Plo
include ./$(DEPDIR)/compose.Plo
include ./$(DEPDIR)/crossover_class.Plo
include ./$(DEPDIR)/ddf.Plo
include ./$(DEPDIR)/dlp.Plo
include ./$(DEPDIR)/dpsr_bigint.Plo
include ./$(DEPDIR)/dpsr_bigmod.Plo
include ./$(DEPDIR)/dpsr_bigrational.Plo
include ./$(DEPDIR)/dpsr_udigit_mod.Plo
include ./$(DEPDIR)/edf.Plo
include ./$(DEPDIR)/fact_Fp_polynomial.Plo
include ./$(DEPDIR)/fact_gf_polynomial.Plo
include ./$(DEPDIR)/factoring.Plo
include ./$(DEPDIR)/fft_arith.Plo
include ./$(DEPDIR)/fft_prime.Plo
include ./$(DEPDIR)/fft_reps.Plo
include ./$(DEPDIR)/find_factors.Plo
include ./$(DEPDIR)/fractions.Plo
include ./$(DEPDIR)/galois_field.Plo
include ./$(DEPDIR)/galois_field_iterator.Plo
include ./$(DEPDIR)/galois_field_rep.Plo
include ./$(DEPDIR)/gcd.Plo
include ./$(DEPDIR)/gf2n.Plo
include ./$(DEPDIR)/gf2nIO.Plo
include ./$(DEPDIR)/gf2n_find_root.Plo
include ./$(DEPDIR)/gf2n_init.Plo
include ./$(DEPDIR)/gf2n_invert.Plo
include ./$(DEPDIR)/gf2n_lib.Plo
include ./$(DEPDIR)/gf2n_mult.Plo
include ./$(DEPDIR)/gf2n_poly_karatzuba.Plo
include ./$(DEPDIR)/gf2n_poly_modulus.Plo
include ./$(DEPDIR)/gf2n_poly_remainder.Plo
include ./$(DEPDIR)/gf2n_polynomial.Plo
include ./$(DEPDIR)/gf2n_rational_function.Plo
include ./$(DEPDIR)/gf2n_reduce.Plo
include ./$(DEPDIR)/gf2nin.Plo
include ./$(DEPDIR)/gf2nout.Plo
include ./$(DEPDIR)/gf_berlekamp.Plo
include ./$(DEPDIR)/gf_can_zass.Plo
include ./$(DEPDIR)/gf_element.Plo
include ./$(DEPDIR)/gf_fact_util.Plo
include ./$(DEPDIR)/gf_factor.Plo
include ./$(DEPDIR)/gf_pol_arith.Plo
include ./$(DEPDIR)/gf_pol_instant.Plo
include ./$(DEPDIR)/gf_pol_util.Plo
include ./$(DEPDIR)/gf_poly_argument.Plo
include ./$(DEPDIR)/gf_poly_modulus.Plo
include ./$(DEPDIR)/gf_polynomial.Plo
include ./$(DEPDIR)/gf_rep_GF2n.Plo
include ./$(DEPDIR)/gf_rep_GFp.Plo
include ./$(DEPDIR)/gf_rep_GFpn.Plo
include ./$(DEPDIR)/gf_squarefree.Plo
include ./$(DEPDIR)/info_gf2n.Plo
include ./$(DEPDIR)/info_gf2n_inv.Plo
include ./$(DEPDIR)/info_gf2n_mul.Plo
include ./$(DEPDIR)/info_gf2n_red.Plo
include ./$(DEPDIR)/lpf_gf2n.Plo
include ./$(DEPDIR)/old_ddf.Plo
include ./$(DEPDIR)/plain_arith.Plo
include ./$(DEPDIR)/poly_argument.Plo
include ./$(DEPDIR)/poly_matrix.Plo
include ./$(DEPDIR)/sf_Fp_polynomial.Plo
include ./$(DEPDIR)/sf_gf_polynomial.Plo
include ./$(DEPDIR)/spsr_bigint.Plo
include ./$(DEPDIR)/spsr_bigmod.Plo
include ./$(DEPDIR)/spsr_bigrational.Plo
include ./$(DEPDIR)/spsr_udigit_mod.Plo
include ./$(DEPDIR)/squarefree.Plo
include ./$(DEPDIR)/sv_pp_sf_Fp_polynomial.Plo
include ./$(DEPDIR)/sv_pp_sf_gf_polynomial.Plo
include ./$(DEPDIR)/sv_spc_bigint.Plo
include ./$(DEPDIR)/sv_spc_bigmod.Plo
include ./$(DEPDIR)/sv_spc_bigrational.Plo
include ./$(DEPDIR)/sv_spc_udigit_mod.Plo

.cc.o:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cc.lo:
	$(AM_V_CXX)$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

Fp_pol_arithmetic.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_arithmetic.lo -MD -MP -MF $(DEPDIR)/Fp_pol_arithmetic.Tpo -c -o Fp_pol_arithmetic.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_pol_arithmetic.Tpo $(DEPDIR)/Fp_pol_arithmetic.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc' object='Fp_pol_arithmetic.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_arithmetic.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_arithmetic.cc

Fp_pol_tools.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_pol_tools.lo -MD -MP -MF $(DEPDIR)/Fp_pol_tools.Tpo -c -o Fp_pol_tools.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_pol_tools.Tpo $(DEPDIR)/Fp_pol_tools.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc' object='Fp_pol_tools.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_pol_tools.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_pol_tools.cc

Fp_poly_modulus.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_poly_modulus.lo -MD -MP -MF $(DEPDIR)/Fp_poly_modulus.Tpo -c -o Fp_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_poly_modulus.Tpo $(DEPDIR)/Fp_poly_modulus.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc' object='Fp_poly_modulus.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_modulus.cc

Fp_poly_multiplier.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_poly_multiplier.lo -MD -MP -MF $(DEPDIR)/Fp_poly_multiplier.Tpo -c -o Fp_poly_multiplier.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_poly_multiplier.Tpo $(DEPDIR)/Fp_poly_multiplier.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc' object='Fp_poly_multiplier.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_poly_multiplier.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_poly_multiplier.cc

Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/Fp_polynomial.Tpo -c -o Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_polynomial.Tpo $(DEPDIR)/Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc' object='Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/Fp_polynomial.cc

compose.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT compose.lo -MD -MP -MF $(DEPDIR)/compose.Tpo -c -o compose.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/compose.Tpo $(DEPDIR)/compose.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc' object='compose.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o compose.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/compose.cc

crossover_class.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT crossover_class.lo -MD -MP -MF $(DEPDIR)/crossover_class.Tpo -c -o crossover_class.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/crossover_class.Tpo $(DEPDIR)/crossover_class.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc' object='crossover_class.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o crossover_class.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/crossover_class.cc

factoring.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT factoring.lo -MD -MP -MF $(DEPDIR)/factoring.Tpo -c -o factoring.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/factoring.Tpo $(DEPDIR)/factoring.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc' object='factoring.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o factoring.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/factoring.cc

fft_arith.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_arith.lo -MD -MP -MF $(DEPDIR)/fft_arith.Tpo -c -o fft_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fft_arith.Tpo $(DEPDIR)/fft_arith.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc' object='fft_arith.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_arith.cc

fft_reps.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_reps.lo -MD -MP -MF $(DEPDIR)/fft_reps.Tpo -c -o fft_reps.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fft_reps.Tpo $(DEPDIR)/fft_reps.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc' object='fft_reps.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_reps.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fft_reps.cc

fractions.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fractions.lo -MD -MP -MF $(DEPDIR)/fractions.Tpo -c -o fractions.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fractions.Tpo $(DEPDIR)/fractions.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc' object='fractions.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fractions.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/fractions.cc

gcd.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gcd.lo -MD -MP -MF $(DEPDIR)/gcd.Tpo -c -o gcd.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gcd.Tpo $(DEPDIR)/gcd.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc' object='gcd.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gcd.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/gcd.cc

plain_arith.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT plain_arith.lo -MD -MP -MF $(DEPDIR)/plain_arith.Tpo -c -o plain_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/plain_arith.Tpo $(DEPDIR)/plain_arith.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc' object='plain_arith.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o plain_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/plain_arith.cc

poly_argument.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT poly_argument.lo -MD -MP -MF $(DEPDIR)/poly_argument.Tpo -c -o poly_argument.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/poly_argument.Tpo $(DEPDIR)/poly_argument.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc' object='poly_argument.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o poly_argument.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_argument.cc

poly_matrix.lo: $(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT poly_matrix.lo -MD -MP -MF $(DEPDIR)/poly_matrix.Tpo -c -o poly_matrix.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/poly_matrix.Tpo $(DEPDIR)/poly_matrix.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc' object='poly_matrix.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o poly_matrix.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_polynomial/poly_matrix.cc

Fp_rational_function.lo: $(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_rational_function.lo -MD -MP -MF $(DEPDIR)/Fp_rational_function.Tpo -c -o Fp_rational_function.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_rational_function.Tpo $(DEPDIR)/Fp_rational_function.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc' object='Fp_rational_function.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_rational_function.lo `test -f '$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/Fp_rational_function/Fp_rational_function.cc

dlp.lo: $(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dlp.lo -MD -MP -MF $(DEPDIR)/dlp.Tpo -c -o dlp.lo `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dlp.Tpo $(DEPDIR)/dlp.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc' object='dlp.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dlp.lo `test -f '$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/discrete_log/pohlig_hellman/dlp.cc

Fp_factor.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_factor.lo -MD -MP -MF $(DEPDIR)/Fp_factor.Tpo -c -o Fp_factor.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_factor.Tpo $(DEPDIR)/Fp_factor.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc' object='Fp_factor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_factor.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor.cc

Fp_factor_generic.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Fp_factor_generic.lo -MD -MP -MF $(DEPDIR)/Fp_factor_generic.Tpo -c -o Fp_factor_generic.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/Fp_factor_generic.Tpo $(DEPDIR)/Fp_factor_generic.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc' object='Fp_factor_generic.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Fp_factor_generic.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/Fp_factor_generic.cc

berlekamp.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT berlekamp.lo -MD -MP -MF $(DEPDIR)/berlekamp.Tpo -c -o berlekamp.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/berlekamp.Tpo $(DEPDIR)/berlekamp.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc' object='berlekamp.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o berlekamp.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/berlekamp.cc

binomial.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT binomial.lo -MD -MP -MF $(DEPDIR)/binomial.Tpo -c -o binomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/binomial.Tpo $(DEPDIR)/binomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc' object='binomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o binomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/binomial.cc

canzass.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT canzass.lo -MD -MP -MF $(DEPDIR)/canzass.Tpo -c -o canzass.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/canzass.Tpo $(DEPDIR)/canzass.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc' object='canzass.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o canzass.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/canzass.cc

ddf.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ddf.lo -MD -MP -MF $(DEPDIR)/ddf.Tpo -c -o ddf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/ddf.Tpo $(DEPDIR)/ddf.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc' object='ddf.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ddf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/ddf.cc

edf.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT edf.lo -MD -MP -MF $(DEPDIR)/edf.Tpo -c -o edf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/edf.Tpo $(DEPDIR)/edf.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc' object='edf.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o edf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/edf.cc

find_factors.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT find_factors.lo -MD -MP -MF $(DEPDIR)/find_factors.Tpo -c -o find_factors.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/find_factors.Tpo $(DEPDIR)/find_factors.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc' object='find_factors.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o find_factors.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/find_factors.cc

old_ddf.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT old_ddf.lo -MD -MP -MF $(DEPDIR)/old_ddf.Tpo -c -o old_ddf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/old_ddf.Tpo $(DEPDIR)/old_ddf.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc' object='old_ddf.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o old_ddf.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/old_ddf.cc

squarefree.lo: $(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT squarefree.lo -MD -MP -MF $(DEPDIR)/squarefree.Tpo -c -o squarefree.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/squarefree.Tpo $(DEPDIR)/squarefree.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc' object='squarefree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o squarefree.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/Fp_polynomial/squarefree.cc

checked_min_poly.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT checked_min_poly.lo -MD -MP -MF $(DEPDIR)/checked_min_poly.Tpo -c -o checked_min_poly.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/checked_min_poly.Tpo $(DEPDIR)/checked_min_poly.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc' object='checked_min_poly.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o checked_min_poly.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/checked_min_poly.cc

gf_berlekamp.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_berlekamp.lo -MD -MP -MF $(DEPDIR)/gf_berlekamp.Tpo -c -o gf_berlekamp.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_berlekamp.Tpo $(DEPDIR)/gf_berlekamp.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc' object='gf_berlekamp.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_berlekamp.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_berlekamp.cc

gf_can_zass.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_can_zass.lo -MD -MP -MF $(DEPDIR)/gf_can_zass.Tpo -c -o gf_can_zass.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_can_zass.Tpo $(DEPDIR)/gf_can_zass.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc' object='gf_can_zass.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_can_zass.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_can_zass.cc

gf_fact_util.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_fact_util.lo -MD -MP -MF $(DEPDIR)/gf_fact_util.Tpo -c -o gf_fact_util.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_fact_util.Tpo $(DEPDIR)/gf_fact_util.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc' object='gf_fact_util.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_fact_util.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_fact_util.cc

gf_factor.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_factor.lo -MD -MP -MF $(DEPDIR)/gf_factor.Tpo -c -o gf_factor.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_factor.Tpo $(DEPDIR)/gf_factor.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc' object='gf_factor.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_factor.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_factor.cc

gf_squarefree.lo: $(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_squarefree.lo -MD -MP -MF $(DEPDIR)/gf_squarefree.Tpo -c -o gf_squarefree.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_squarefree.Tpo $(DEPDIR)/gf_squarefree.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc' object='gf_squarefree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_squarefree.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/gf_polynomial/gf_squarefree.cc

sf_Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sf_Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/sf_Fp_polynomial.Tpo -c -o sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sf_Fp_polynomial.Tpo $(DEPDIR)/sf_Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc' object='sf_Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/sf_Fp_polynomial.cc

sf_gf_polynomial.lo: $(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sf_gf_polynomial.lo -MD -MP -MF $(DEPDIR)/sf_gf_polynomial.Tpo -c -o sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sf_gf_polynomial.Tpo $(DEPDIR)/sf_gf_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc' object='sf_gf_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/factorization/sf_gf_polynomial.cc

bit_reverse_table.lo: $(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bit_reverse_table.lo -MD -MP -MF $(DEPDIR)/bit_reverse_table.Tpo -c -o bit_reverse_table.lo `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bit_reverse_table.Tpo $(DEPDIR)/bit_reverse_table.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc' object='bit_reverse_table.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bit_reverse_table.lo `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/bit_reverse_table.cc

fft_prime.lo: $(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fft_prime.lo -MD -MP -MF $(DEPDIR)/fft_prime.Tpo -c -o fft_prime.lo `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fft_prime.Tpo $(DEPDIR)/fft_prime.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc' object='fft_prime.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fft_prime.lo `test -f '$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/fft_prime/fft_prime.cc

gf2n.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n.lo -MD -MP -MF $(DEPDIR)/gf2n.Tpo -c -o gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n.Tpo $(DEPDIR)/gf2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc' object='gf2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n.cc

gf2nIO.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2nIO.lo -MD -MP -MF $(DEPDIR)/gf2nIO.Tpo -c -o gf2nIO.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2nIO.Tpo $(DEPDIR)/gf2nIO.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc' object='gf2nIO.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2nIO.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nIO.cc

gf2n_init.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_init.lo -MD -MP -MF $(DEPDIR)/gf2n_init.Tpo -c -o gf2n_init.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_init.Tpo $(DEPDIR)/gf2n_init.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc' object='gf2n_init.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_init.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_init.cc

gf2n_invert.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_invert.lo -MD -MP -MF $(DEPDIR)/gf2n_invert.Tpo -c -o gf2n_invert.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_invert.Tpo $(DEPDIR)/gf2n_invert.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc' object='gf2n_invert.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_invert.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_invert.cc

gf2n_lib.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_lib.lo -MD -MP -MF $(DEPDIR)/gf2n_lib.Tpo -c -o gf2n_lib.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_lib.Tpo $(DEPDIR)/gf2n_lib.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc' object='gf2n_lib.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_lib.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_lib.cc

gf2n_mult.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_mult.lo -MD -MP -MF $(DEPDIR)/gf2n_mult.Tpo -c -o gf2n_mult.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_mult.Tpo $(DEPDIR)/gf2n_mult.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc' object='gf2n_mult.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_mult.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_mult.cc

gf2n_reduce.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_reduce.lo -MD -MP -MF $(DEPDIR)/gf2n_reduce.Tpo -c -o gf2n_reduce.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_reduce.Tpo $(DEPDIR)/gf2n_reduce.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc' object='gf2n_reduce.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_reduce.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2n_reduce.cc

gf2nin.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2nin.lo -MD -MP -MF $(DEPDIR)/gf2nin.Tpo -c -o gf2nin.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2nin.Tpo $(DEPDIR)/gf2nin.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc' object='gf2nin.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2nin.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nin.cc

gf2nout.lo: $(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2nout.lo -MD -MP -MF $(DEPDIR)/gf2nout.Tpo -c -o gf2nout.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2nout.Tpo $(DEPDIR)/gf2nout.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc' object='gf2nout.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2nout.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n/gf2nout.cc

gf2n_find_root.lo: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_find_root.lo -MD -MP -MF $(DEPDIR)/gf2n_find_root.Tpo -c -o gf2n_find_root.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_find_root.Tpo $(DEPDIR)/gf2n_find_root.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc' object='gf2n_find_root.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_find_root.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_find_root.cc

gf2n_poly_karatzuba.lo: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_karatzuba.lo -MD -MP -MF $(DEPDIR)/gf2n_poly_karatzuba.Tpo -c -o gf2n_poly_karatzuba.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_poly_karatzuba.Tpo $(DEPDIR)/gf2n_poly_karatzuba.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc' object='gf2n_poly_karatzuba.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_karatzuba.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_karatzuba.cc

gf2n_poly_modulus.lo: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_modulus.lo -MD -MP -MF $(DEPDIR)/gf2n_poly_modulus.Tpo -c -o gf2n_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_poly_modulus.Tpo $(DEPDIR)/gf2n_poly_modulus.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc' object='gf2n_poly_modulus.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_modulus.cc

gf2n_poly_remainder.lo: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_poly_remainder.lo -MD -MP -MF $(DEPDIR)/gf2n_poly_remainder.Tpo -c -o gf2n_poly_remainder.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_poly_remainder.Tpo $(DEPDIR)/gf2n_poly_remainder.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc' object='gf2n_poly_remainder.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_poly_remainder.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_poly_remainder.cc

gf2n_polynomial.lo: $(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_polynomial.lo -MD -MP -MF $(DEPDIR)/gf2n_polynomial.Tpo -c -o gf2n_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_polynomial.Tpo $(DEPDIR)/gf2n_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc' object='gf2n_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_polynomial/gf2n_polynomial.cc

gf2n_rational_function.lo: $(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf2n_rational_function.lo -MD -MP -MF $(DEPDIR)/gf2n_rational_function.Tpo -c -o gf2n_rational_function.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf2n_rational_function.Tpo $(DEPDIR)/gf2n_rational_function.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc' object='gf2n_rational_function.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf2n_rational_function.lo `test -f '$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf2n_rational_function/gf2n_rational_function.cc

gf_pol_arith.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_arith.lo -MD -MP -MF $(DEPDIR)/gf_pol_arith.Tpo -c -o gf_pol_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_arith.Tpo $(DEPDIR)/gf_pol_arith.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc' object='gf_pol_arith.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_arith.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_arith.cc

gf_pol_instant.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_instant.lo -MD -MP -MF $(DEPDIR)/gf_pol_instant.Tpo -c -o gf_pol_instant.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_instant.Tpo $(DEPDIR)/gf_pol_instant.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc' object='gf_pol_instant.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_instant.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_instant.cc

gf_pol_util.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_pol_util.lo -MD -MP -MF $(DEPDIR)/gf_pol_util.Tpo -c -o gf_pol_util.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_pol_util.Tpo $(DEPDIR)/gf_pol_util.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc' object='gf_pol_util.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_pol_util.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_pol_util.cc

gf_poly_argument.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_poly_argument.lo -MD -MP -MF $(DEPDIR)/gf_poly_argument.Tpo -c -o gf_poly_argument.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_poly_argument.Tpo $(DEPDIR)/gf_poly_argument.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc' object='gf_poly_argument.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_poly_argument.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_argument.cc

gf_poly_modulus.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_poly_modulus.lo -MD -MP -MF $(DEPDIR)/gf_poly_modulus.Tpo -c -o gf_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_poly_modulus.Tpo $(DEPDIR)/gf_poly_modulus.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc' object='gf_poly_modulus.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_poly_modulus.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_poly_modulus.cc

gf_polynomial.lo: $(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_polynomial.lo -MD -MP -MF $(DEPDIR)/gf_polynomial.Tpo -c -o gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_polynomial.Tpo $(DEPDIR)/gf_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc' object='gf_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gf_polynomial/gf_polynomial.cc

galois_field.lo: $(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field.lo -MD -MP -MF $(DEPDIR)/galois_field.Tpo -c -o galois_field.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/galois_field.Tpo $(DEPDIR)/galois_field.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc' object='galois_field.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field.cc

galois_field_iterator.lo: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_iterator.lo -MD -MP -MF $(DEPDIR)/galois_field_iterator.Tpo -c -o galois_field_iterator.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/galois_field_iterator.Tpo $(DEPDIR)/galois_field_iterator.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc' object='galois_field_iterator.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_iterator.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_iterator.cc

galois_field_rep.lo: $(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT galois_field_rep.lo -MD -MP -MF $(DEPDIR)/galois_field_rep.Tpo -c -o galois_field_rep.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/galois_field_rep.Tpo $(DEPDIR)/galois_field_rep.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc' object='galois_field_rep.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o galois_field_rep.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/galois_field_rep.cc

gf_element.lo: $(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_element.lo -MD -MP -MF $(DEPDIR)/gf_element.Tpo -c -o gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_element.Tpo $(DEPDIR)/gf_element.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc' object='gf_element.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_element.cc

gf_rep_GF2n.lo: $(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_rep_GF2n.lo -MD -MP -MF $(DEPDIR)/gf_rep_GF2n.Tpo -c -o gf_rep_GF2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_rep_GF2n.Tpo $(DEPDIR)/gf_rep_GF2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc' object='gf_rep_GF2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_rep_GF2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GF2n.cc

gf_rep_GFp.lo: $(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_rep_GFp.lo -MD -MP -MF $(DEPDIR)/gf_rep_GFp.Tpo -c -o gf_rep_GFp.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_rep_GFp.Tpo $(DEPDIR)/gf_rep_GFp.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc' object='gf_rep_GFp.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_rep_GFp.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFp.cc

gf_rep_GFpn.lo: $(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT gf_rep_GFpn.lo -MD -MP -MF $(DEPDIR)/gf_rep_GFpn.Tpo -c -o gf_rep_GFpn.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/gf_rep_GFpn.Tpo $(DEPDIR)/gf_rep_GFpn.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc' object='gf_rep_GFpn.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o gf_rep_GFpn.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/gf_rep_GFpn.cc

info_gf2n.lo: $(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT info_gf2n.lo -MD -MP -MF $(DEPDIR)/info_gf2n.Tpo -c -o info_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/info_gf2n.Tpo $(DEPDIR)/info_gf2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc' object='info_gf2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o info_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n.cc

info_gf2n_inv.lo: $(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT info_gf2n_inv.lo -MD -MP -MF $(DEPDIR)/info_gf2n_inv.Tpo -c -o info_gf2n_inv.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/info_gf2n_inv.Tpo $(DEPDIR)/info_gf2n_inv.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc' object='info_gf2n_inv.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o info_gf2n_inv.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_inv.cc

info_gf2n_mul.lo: $(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT info_gf2n_mul.lo -MD -MP -MF $(DEPDIR)/info_gf2n_mul.Tpo -c -o info_gf2n_mul.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/info_gf2n_mul.Tpo $(DEPDIR)/info_gf2n_mul.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc' object='info_gf2n_mul.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o info_gf2n_mul.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_mul.cc

info_gf2n_red.lo: $(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT info_gf2n_red.lo -MD -MP -MF $(DEPDIR)/info_gf2n_red.Tpo -c -o info_gf2n_red.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/info_gf2n_red.Tpo $(DEPDIR)/info_gf2n_red.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc' object='info_gf2n_red.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o info_gf2n_red.lo `test -f '$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/gfpn/info_gf2n_red.cc

bpf_gf2n.lo: $(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bpf_gf2n.lo -MD -MP -MF $(DEPDIR)/bpf_gf2n.Tpo -c -o bpf_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bpf_gf2n.Tpo $(DEPDIR)/bpf_gf2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc' object='bpf_gf2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bpf_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf2n.cc

bpf_gf_element.lo: $(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bpf_gf_element.lo -MD -MP -MF $(DEPDIR)/bpf_gf_element.Tpo -c -o bpf_gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bpf_gf_element.Tpo $(DEPDIR)/bpf_gf_element.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc' object='bpf_gf_element.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bpf_gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bpf_gf_element.cc

bv_Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/bv_Fp_polynomial.Tpo -c -o bv_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_Fp_polynomial.Tpo $(DEPDIR)/bv_Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc' object='bv_Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_Fp_polynomial.cc

bv_gf2n.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_gf2n.lo -MD -MP -MF $(DEPDIR)/bv_gf2n.Tpo -c -o bv_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_gf2n.Tpo $(DEPDIR)/bv_gf2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc' object='bv_gf2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_gf2n.cc

bv_gf_element.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_gf_element.lo -MD -MP -MF $(DEPDIR)/bv_gf_element.Tpo -c -o bv_gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_gf_element.Tpo $(DEPDIR)/bv_gf_element.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc' object='bv_gf_element.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_gf_element.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_gf_element.cc

bv_pp_sf_Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_pp_sf_Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/bv_pp_sf_Fp_polynomial.Tpo -c -o bv_pp_sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_pp_sf_Fp_polynomial.Tpo $(DEPDIR)/bv_pp_sf_Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc' object='bv_pp_sf_Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_pp_sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_Fp_polynomial.cc

bv_pp_sf_gf_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_pp_sf_gf_polynomial.lo -MD -MP -MF $(DEPDIR)/bv_pp_sf_gf_polynomial.Tpo -c -o bv_pp_sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_pp_sf_gf_polynomial.Tpo $(DEPDIR)/bv_pp_sf_gf_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc' object='bv_pp_sf_gf_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_pp_sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_pp_sf_gf_polynomial.cc

bv_spc_bigint.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_spc_bigint.lo -MD -MP -MF $(DEPDIR)/bv_spc_bigint.Tpo -c -o bv_spc_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_spc_bigint.Tpo $(DEPDIR)/bv_spc_bigint.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc' object='bv_spc_bigint.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_spc_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigint.cc

bv_spc_bigmod.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_spc_bigmod.lo -MD -MP -MF $(DEPDIR)/bv_spc_bigmod.Tpo -c -o bv_spc_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_spc_bigmod.Tpo $(DEPDIR)/bv_spc_bigmod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc' object='bv_spc_bigmod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_spc_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigmod.cc

bv_spc_bigrational.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_spc_bigrational.lo -MD -MP -MF $(DEPDIR)/bv_spc_bigrational.Tpo -c -o bv_spc_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_spc_bigrational.Tpo $(DEPDIR)/bv_spc_bigrational.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc' object='bv_spc_bigrational.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_spc_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_bigrational.cc

bv_spc_udigit_mod.lo: $(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT bv_spc_udigit_mod.lo -MD -MP -MF $(DEPDIR)/bv_spc_udigit_mod.Tpo -c -o bv_spc_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/bv_spc_udigit_mod.Tpo $(DEPDIR)/bv_spc_udigit_mod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc' object='bv_spc_udigit_mod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o bv_spc_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/bv_spc_udigit_mod.cc

dpsr_bigint.lo: $(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_bigint.lo -MD -MP -MF $(DEPDIR)/dpsr_bigint.Tpo -c -o dpsr_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_bigint.Tpo $(DEPDIR)/dpsr_bigint.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc' object='dpsr_bigint.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigint.cc

dpsr_bigrational.lo: $(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_bigrational.lo -MD -MP -MF $(DEPDIR)/dpsr_bigrational.Tpo -c -o dpsr_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_bigrational.Tpo $(DEPDIR)/dpsr_bigrational.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc' object='dpsr_bigrational.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/dpsr_bigrational.cc

fact_Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fact_Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/fact_Fp_polynomial.Tpo -c -o fact_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fact_Fp_polynomial.Tpo $(DEPDIR)/fact_Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc' object='fact_Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fact_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/fact_Fp_polynomial.cc

fact_gf_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT fact_gf_polynomial.lo -MD -MP -MF $(DEPDIR)/fact_gf_polynomial.Tpo -c -o fact_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/fact_gf_polynomial.Tpo $(DEPDIR)/fact_gf_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc' object='fact_gf_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o fact_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/fact_gf_polynomial.cc

lpf_gf2n.lo: $(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lpf_gf2n.lo -MD -MP -MF $(DEPDIR)/lpf_gf2n.Tpo -c -o lpf_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/lpf_gf2n.Tpo $(DEPDIR)/lpf_gf2n.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc' object='lpf_gf2n.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lpf_gf2n.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/lpf_gf2n.cc

spsr_bigint.lo: $(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spsr_bigint.lo -MD -MP -MF $(DEPDIR)/spsr_bigint.Tpo -c -o spsr_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/spsr_bigint.Tpo $(DEPDIR)/spsr_bigint.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc' object='spsr_bigint.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spsr_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigint.cc

spsr_bigrational.lo: $(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spsr_bigrational.lo -MD -MP -MF $(DEPDIR)/spsr_bigrational.Tpo -c -o spsr_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/spsr_bigrational.Tpo $(DEPDIR)/spsr_bigrational.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc' object='spsr_bigrational.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spsr_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_bigrational.cc

spsr_udigit_mod.lo: $(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spsr_udigit_mod.lo -MD -MP -MF $(DEPDIR)/spsr_udigit_mod.Tpo -c -o spsr_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/spsr_udigit_mod.Tpo $(DEPDIR)/spsr_udigit_mod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc' object='spsr_udigit_mod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spsr_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/spsr_udigit_mod.cc

sv_pp_sf_Fp_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_pp_sf_Fp_polynomial.lo -MD -MP -MF $(DEPDIR)/sv_pp_sf_Fp_polynomial.Tpo -c -o sv_pp_sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_pp_sf_Fp_polynomial.Tpo $(DEPDIR)/sv_pp_sf_Fp_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc' object='sv_pp_sf_Fp_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_pp_sf_Fp_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_Fp_polynomial.cc

sv_pp_sf_gf_polynomial.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_pp_sf_gf_polynomial.lo -MD -MP -MF $(DEPDIR)/sv_pp_sf_gf_polynomial.Tpo -c -o sv_pp_sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_pp_sf_gf_polynomial.Tpo $(DEPDIR)/sv_pp_sf_gf_polynomial.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc' object='sv_pp_sf_gf_polynomial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_pp_sf_gf_polynomial.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_pp_sf_gf_polynomial.cc

sv_spc_bigint.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_spc_bigint.lo -MD -MP -MF $(DEPDIR)/sv_spc_bigint.Tpo -c -o sv_spc_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_spc_bigint.Tpo $(DEPDIR)/sv_spc_bigint.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc' object='sv_spc_bigint.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_spc_bigint.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigint.cc

sv_spc_bigmod.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_spc_bigmod.lo -MD -MP -MF $(DEPDIR)/sv_spc_bigmod.Tpo -c -o sv_spc_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_spc_bigmod.Tpo $(DEPDIR)/sv_spc_bigmod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc' object='sv_spc_bigmod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_spc_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigmod.cc

sv_spc_bigrational.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_spc_bigrational.lo -MD -MP -MF $(DEPDIR)/sv_spc_bigrational.Tpo -c -o sv_spc_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_spc_bigrational.Tpo $(DEPDIR)/sv_spc_bigrational.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc' object='sv_spc_bigrational.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_spc_bigrational.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_bigrational.cc

sv_spc_udigit_mod.lo: $(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sv_spc_udigit_mod.lo -MD -MP -MF $(DEPDIR)/sv_spc_udigit_mod.Tpo -c -o sv_spc_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/sv_spc_udigit_mod.Tpo $(DEPDIR)/sv_spc_udigit_mod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc' object='sv_spc_udigit_mod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sv_spc_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/instantiate/sv_spc_udigit_mod.cc

dpsr_bigmod.lo: $(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_bigmod.lo -MD -MP -MF $(DEPDIR)/dpsr_bigmod.Tpo -c -o dpsr_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_bigmod.Tpo $(DEPDIR)/dpsr_bigmod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc' object='dpsr_bigmod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_bigmod.cc

dpsr_udigit_mod.lo: $(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dpsr_udigit_mod.lo -MD -MP -MF $(DEPDIR)/dpsr_udigit_mod.Tpo -c -o dpsr_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/dpsr_udigit_mod.Tpo $(DEPDIR)/dpsr_udigit_mod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc' object='dpsr_udigit_mod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dpsr_udigit_mod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/dpsr_udigit_mod.cc

spsr_bigmod.lo: $(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT spsr_bigmod.lo -MD -MP -MF $(DEPDIR)/spsr_bigmod.Tpo -c -o spsr_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc
	$(AM_V_at)$(am__mv) $(DEPDIR)/spsr_bigmod.Tpo $(DEPDIR)/spsr_bigmod.Plo
#	$(AM_V_CXX)source='$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc' object='spsr_bigmod.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o spsr_bigmod.lo `test -f '$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc' || echo '$(srcdir)/'`$(LIDIA_FF_SRCDIR)/powser/spsr_bigmod.cc

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-dist_pkgdataDATA: $(dist_pkgdata_DATA)
	@$(NORMAL_INSTALL)
	@list='$(dist_pkgdata_DATA)'; test -n "$(pkgdatadir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgdatadir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgdatadir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgdatadir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgdatadir)" || exit $$?; \
	done

uninstall-dist_pkgdataDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(dist_pkgdata_DATA)'; test -n "$(pkgdatadir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgdatadir)'; $(am__uninstall_files_from_dir)
install-ffincludeHEADERS: $(ffinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(ffinclude_HEADERS)'; test -n "$(ffincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(ffincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(ffincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(ffincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(ffincludedir)" || exit $$?; \
	done

uninstall-ffincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(ffinclude_HEADERS)'; test -n "$(ffincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(ffincludedir)'; $(am__uninstall_files_from_dir)
install-instantincludeHEADERS: $(instantinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(instantinclude_HEADERS)'; test -n "$(instantincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(instantincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(instantincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(instantincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(instantincludedir)" || exit $$?; \
	done

uninstall-instantincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(instantinclude_HEADERS)'; test -n "$(instantincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(instantincludedir)'; $(am__uninstall_files_from_dir)
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(pkgincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(pkgincludedir)'; $(am__uninstall_files_from_dir)
install-specialincludeHEADERS: $(specialinclude_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(specialinclude_HEADERS)'; test -n "$(specialincludedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(specialincludedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(specialincludedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(specialincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(specialincludedir)" || exit $$?; \
	done

uninstall-specialincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(specialinclude_HEADERS)'; test -n "$(specialincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(specialincludedir)'; $(am__uninstall_files_from_dir)

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(DATA) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(pkgdatadir)" "$(DESTDIR)$(ffincludedir)" "$(DESTDIR)$(instantincludedir)" "$(DESTDIR)$(pkgincludedir)" "$(DESTDIR)$(specialincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-dist_pkgdataDATA install-ffincludeHEADERS \
	install-instantincludeHEADERS install-pkgincludeHEADERS \
	install-specialincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-dist_pkgdataDATA uninstall-ffincludeHEADERS \
	uninstall-instantincludeHEADERS uninstall-pkgincludeHEADERS \
	uninstall-specialincludeHEADERS
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) uninstall-hook
.MAKE: install-am install-strip uninstall-am

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES cscopelist-am ctags \
	ctags-am distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dist_pkgdataDATA install-dvi \
	install-dvi-am install-exec install-exec-am \
	install-ffincludeHEADERS install-html install-html-am \
	install-info install-info-am install-instantincludeHEADERS \
	install-man install-pdf install-pdf-am \
	install-pkgincludeHEADERS install-ps install-ps-am \
	install-specialincludeHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags tags-am uninstall uninstall-am uninstall-dist_pkgdataDATA \
	uninstall-ffincludeHEADERS uninstall-hook \
	uninstall-instantincludeHEADERS uninstall-pkgincludeHEADERS \
	uninstall-specialincludeHEADERS


 #

# Remove installation subdirectories after uninstalling, unless left non-empty.
uninstall-hook:
	rmdir	$(DESTDIR)$(instantincludedir) \
		$(DESTDIR)$(specialincludedir) \
		$(DESTDIR)$(ffincludedir) \
		$(DESTDIR)$(pkgincludedir) \
		$(DESTDIR)$(pkgdatadir) \
		2>/dev/null; :

# Delete half-made targets when their commands fail
.DELETE_ON_ERROR:

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
